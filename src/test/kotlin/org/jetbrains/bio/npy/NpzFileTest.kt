package org.jetbrains.bio.npy

import org.junit.Assert.assertArrayEquals
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.Parameterized
import org.junit.runners.Parameterized.Parameters
import java.nio.ByteOrder
import java.util.*
import kotlin.test.assertEquals

/**
 * The test file was generated by the following Python script:
 *
 *     import numpy as np
 *
 *     np.savez("example.npz",
 *              x_i1=np.array([1, 2, 3, 4], dtype="|i1"),
 *              x_i2=np.array([1, 2, 3, 4, 4096], dtype=">i2"),
 *              x_u4=np.array([1, 2, 3, 4], dtype=">u4"),
 *              x_i8=np.array([1, 2, 3, 4, 65536], dtype="<i8"),
 *              x_f4=np.array([1, 2, 3, 4], dtype="<f4"),
 *              x_f8=np.array([1, 2, 3, 4], dtype="<f8"),
 *              x_b=np.array([True, True, True, False], dtype="|b1"),
 *              x_S3=np.array(["aha", "hah"], dtype="|S3"))
 *
 * NumPy version 1.10.2.
 */
class NpzFileTest {
    @Test fun introspectTypes() {
        NpzFile.read(Examples["example.npz"]).use { npzf ->
            assertEquals(mapOf("x_i1" to Byte::class.java,
                               "x_i2" to Short::class.java,
                               "x_u4" to Int::class.java,
                               "x_i8" to Long::class.java,
                               "x_f4" to Float::class.java,
                               "x_f8" to Double::class.java,
                               "x_b" to Boolean::class.java,
                               "x_S3" to String::class.java),
                         npzf.introspect().associateBy({ it.name }, { it.type }))
        }
    }

    @Test fun introspectNames() {
        NpzFile.read(Examples["example.npz"]).use { npzf ->
            assertEquals(setOf("x_i1", "x_i2", "x_u4", "x_i8",
                               "x_f4", "x_f8", "x_b", "x_S3"),
                         npzf.introspect().map { it.name }.toSet())
        }
    }

    @Suppress("unchecked_cast")
    @Test fun get() {
        NpzFile.read(Examples["example.npz"]).use { npzf ->
            assertArrayEquals(byteArrayOf(1, 2, 3, 4), npzf["x_i1"].asByteArray())
            assertArrayEquals(shortArrayOf(1, 2, 3, 4, 4096), npzf["x_i2"].asShortArray())
            assertArrayEquals(intArrayOf(1, 2, 3, 4), npzf["x_u4"].asIntArray())
            assertArrayEquals(longArrayOf(1, 2, 3, 4, 65536), npzf["x_i8"].asLongArray())

            assertArrayEquals(floatArrayOf(1.0f, 2.0f, 3.0f, 4.0f),
                              npzf["x_f4"].asFloatArray(),
                              Math.ulp(1.0f))
            assertArrayEquals(doubleArrayOf(1.0, 2.0, 3.0, 4.0),
                              npzf["x_f8"].asDoubleArray(),
                              Math.ulp(1.0))

            assertArrayEquals(booleanArrayOf(true, true, true, false),
                              npzf["x_b"].asBooleanArray())

            assertArrayEquals(arrayOf("aha", "hah"), npzf["x_S3"].asStringArray())
        }
    }
}

@RunWith(Parameterized::class)
class NpzFileWriteReadTest(private val order: ByteOrder) {
    @Test fun basic() {
        withTempFile("test", ".npz") { path ->
            val booleans = booleanArrayOf(true, true, true, false)
            val ints = intArrayOf(1, 2, 3, 4)
            val shorts = shortArrayOf(5, 6, 7, 8)
            val floats = floatArrayOf(9.0f, 10.0f, 11.0f, 12.0f)
            val doubles = doubleArrayOf(13.0, 14.0, 15.0, 16.0)
            val longs = longArrayOf(17, 18, 19, 20)
            NpzFile.write(path).use {
                it.write("x_b", booleans)
                it.write("x_i4", ints, order = order)
                it.write("x_i2", shorts, order = order)
                it.write("x_i8", longs, order = order)
                it.write("x_f4", floats, order = order)
                it.write("x_f8", doubles, order = order)
            }

            NpzFile.read(path).use { npzf ->
                assertArrayEquals(booleans, npzf["x_b"].asBooleanArray())
                assertArrayEquals(ints, npzf["x_i4"].asIntArray())
                assertArrayEquals(shorts, npzf["x_i2"].asShortArray())
                assertArrayEquals(longs, npzf["x_i8"].asLongArray())
                assertArrayEquals(floats, npzf["x_f4"].asFloatArray(), 0.0f)
                assertArrayEquals(doubles, npzf["x_f8"].asDoubleArray(), 0.0)
            }
        }
    }

    @Test fun nested() {
        withTempFile("test", ".npz") { path ->
            NpzFile.write(path).use {
                it.write("foo/bar/baz/x_i4", intArrayOf(1, 2, 3, 4), order = order)
            }

            NpzFile.read(path).use { npzf ->
                assertArrayEquals(intArrayOf(1, 2, 3, 4),
                                  npzf["foo/bar/baz/x_i4"].asIntArray())
            }
        }
    }

    @Test fun nd() {
        withTempFile("test", ".npz") { path ->
            NpzFile.write(path).use {
                it.write("x_i4", intArrayOf(1, 2, 3, 4), shape = intArrayOf(2, 2),
                         order = order)
            }

            NpzFile.read(path).use { npzf ->
                assertArrayEquals(intArrayOf(2, 2), npzf["x_i4"].shape)
                assertArrayEquals(intArrayOf(1, 2, 3, 4),
                                  npzf["x_i4"].asIntArray())
            }
        }
    }

    @Test fun unaligned() {
        withTempFile("test", ".npz") { path ->
            val data = IntArray(65536) { it }
            NpzFile.write(path).use {
                it.write("x_i4", data, order = order)
            }

            NpzFile.read(path).use { npzf ->
                assertArrayEquals(data, npzf.get("x_i4", step = 123).asIntArray())
            }
        }
    }

    @Test fun random() {
        val r = Random()
        val maxSize = 65535
        for (i in 0 until 10) {
            val data = Array(r.nextInt(maxSize)) {
                // Random non-empty "ACGT" strings of length no more than 12.
                val alphabet = "ACGT"
                val b = ByteArray(r.nextInt(12) + 1) { alphabet[r.nextInt(4)].toByte() }
                String(b)
            }

            withTempFile("test", ".npz") { path ->
                NpzFile.write(path).use { it.write("data", data) }

                NpzFile.read(path).use {
                    assertArrayEquals(data, it["data"].asStringArray())
                }
            }
        }
    }

    companion object {
        @JvmStatic
        @Parameters(name = "{0}")
        fun `data`(): Collection<Any> = listOf(ByteOrder.BIG_ENDIAN,
                                               ByteOrder.LITTLE_ENDIAN)
    }
}
